/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root';
import { Route as SettingsRouteImport } from './routes/settings';
import { Route as RunsRouteImport } from './routes/runs';
import { Route as NotificationsRouteImport } from './routes/notifications';
import { Route as FlightsRouteImport } from './routes/flights';
import { Route as AddRouteImport } from './routes/add';
import { Route as ActiveRunRouteImport } from './routes/active-run';
import { Route as IndexRouteImport } from './routes/index';

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any);
const RunsRoute = RunsRouteImport.update({
  id: '/runs',
  path: '/runs',
  getParentRoute: () => rootRouteImport,
} as any);
const NotificationsRoute = NotificationsRouteImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => rootRouteImport,
} as any);
const FlightsRoute = FlightsRouteImport.update({
  id: '/flights',
  path: '/flights',
  getParentRoute: () => rootRouteImport,
} as any);
const AddRoute = AddRouteImport.update({
  id: '/add',
  path: '/add',
  getParentRoute: () => rootRouteImport,
} as any);
const ActiveRunRoute = ActiveRunRouteImport.update({
  id: '/active-run',
  path: '/active-run',
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/active-run': typeof ActiveRunRoute;
  '/add': typeof AddRoute;
  '/flights': typeof FlightsRoute;
  '/notifications': typeof NotificationsRoute;
  '/runs': typeof RunsRoute;
  '/settings': typeof SettingsRoute;
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/active-run': typeof ActiveRunRoute;
  '/add': typeof AddRoute;
  '/flights': typeof FlightsRoute;
  '/notifications': typeof NotificationsRoute;
  '/runs': typeof RunsRoute;
  '/settings': typeof SettingsRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/': typeof IndexRoute;
  '/active-run': typeof ActiveRunRoute;
  '/add': typeof AddRoute;
  '/flights': typeof FlightsRoute;
  '/notifications': typeof NotificationsRoute;
  '/runs': typeof RunsRoute;
  '/settings': typeof SettingsRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/active-run'
    | '/add'
    | '/flights'
    | '/notifications'
    | '/runs'
    | '/settings';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/active-run'
    | '/add'
    | '/flights'
    | '/notifications'
    | '/runs'
    | '/settings';
  id:
    | '__root__'
    | '/'
    | '/active-run'
    | '/add'
    | '/flights'
    | '/notifications'
    | '/runs'
    | '/settings';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  ActiveRunRoute: typeof ActiveRunRoute;
  AddRoute: typeof AddRoute;
  FlightsRoute: typeof FlightsRoute;
  NotificationsRoute: typeof NotificationsRoute;
  RunsRoute: typeof RunsRoute;
  SettingsRoute: typeof SettingsRoute;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings';
      path: '/settings';
      fullPath: '/settings';
      preLoaderRoute: typeof SettingsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/runs': {
      id: '/runs';
      path: '/runs';
      fullPath: '/runs';
      preLoaderRoute: typeof RunsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/notifications': {
      id: '/notifications';
      path: '/notifications';
      fullPath: '/notifications';
      preLoaderRoute: typeof NotificationsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/flights': {
      id: '/flights';
      path: '/flights';
      fullPath: '/flights';
      preLoaderRoute: typeof FlightsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/add': {
      id: '/add';
      path: '/add';
      fullPath: '/add';
      preLoaderRoute: typeof AddRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/active-run': {
      id: '/active-run';
      path: '/active-run';
      fullPath: '/active-run';
      preLoaderRoute: typeof ActiveRunRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ActiveRunRoute: ActiveRunRoute,
  AddRoute: AddRoute,
  FlightsRoute: FlightsRoute,
  NotificationsRoute: NotificationsRoute,
  RunsRoute: RunsRoute,
  SettingsRoute: SettingsRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
