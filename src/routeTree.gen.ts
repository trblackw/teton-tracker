/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root';
import { Route as SettingsRouteImport } from './routes/settings';
import { Route as RunsRouteImport } from './routes/runs';
import { Route as RequestRunReportRouteImport } from './routes/request-run-report';
import { Route as ReportsRouteImport } from './routes/reports';
import { Route as ReportTemplatesRouteImport } from './routes/report-templates';
import { Route as OrganizationRouteImport } from './routes/organization';
import { Route as NotificationsRouteImport } from './routes/notifications';
import { Route as FlightsRouteImport } from './routes/flights';
import { Route as DriversRouteImport } from './routes/drivers';
import { Route as CreateRunsRouteImport } from './routes/create-runs';
import { Route as AddRouteImport } from './routes/add';
import { Route as ActiveRunRouteImport } from './routes/active-run';
import { Route as IndexRouteImport } from './routes/index';
import { Route as DriverDriverIdRouteImport } from './routes/driver.$driverId';

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any);
const RunsRoute = RunsRouteImport.update({
  id: '/runs',
  path: '/runs',
  getParentRoute: () => rootRouteImport,
} as any);
const RequestRunReportRoute = RequestRunReportRouteImport.update({
  id: '/request-run-report',
  path: '/request-run-report',
  getParentRoute: () => rootRouteImport,
} as any);
const ReportsRoute = ReportsRouteImport.update({
  id: '/reports',
  path: '/reports',
  getParentRoute: () => rootRouteImport,
} as any);
const ReportTemplatesRoute = ReportTemplatesRouteImport.update({
  id: '/report-templates',
  path: '/report-templates',
  getParentRoute: () => rootRouteImport,
} as any);
const OrganizationRoute = OrganizationRouteImport.update({
  id: '/organization',
  path: '/organization',
  getParentRoute: () => rootRouteImport,
} as any);
const NotificationsRoute = NotificationsRouteImport.update({
  id: '/notifications',
  path: '/notifications',
  getParentRoute: () => rootRouteImport,
} as any);
const FlightsRoute = FlightsRouteImport.update({
  id: '/flights',
  path: '/flights',
  getParentRoute: () => rootRouteImport,
} as any);
const DriversRoute = DriversRouteImport.update({
  id: '/drivers',
  path: '/drivers',
  getParentRoute: () => rootRouteImport,
} as any);
const CreateRunsRoute = CreateRunsRouteImport.update({
  id: '/create-runs',
  path: '/create-runs',
  getParentRoute: () => rootRouteImport,
} as any);
const AddRoute = AddRouteImport.update({
  id: '/add',
  path: '/add',
  getParentRoute: () => rootRouteImport,
} as any);
const ActiveRunRoute = ActiveRunRouteImport.update({
  id: '/active-run',
  path: '/active-run',
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any);
const DriverDriverIdRoute = DriverDriverIdRouteImport.update({
  id: '/driver/$driverId',
  path: '/driver/$driverId',
  getParentRoute: () => rootRouteImport,
} as any);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/active-run': typeof ActiveRunRoute;
  '/add': typeof AddRoute;
  '/create-runs': typeof CreateRunsRoute;
  '/drivers': typeof DriversRoute;
  '/flights': typeof FlightsRoute;
  '/notifications': typeof NotificationsRoute;
  '/organization': typeof OrganizationRoute;
  '/report-templates': typeof ReportTemplatesRoute;
  '/reports': typeof ReportsRoute;
  '/request-run-report': typeof RequestRunReportRoute;
  '/runs': typeof RunsRoute;
  '/settings': typeof SettingsRoute;
  '/driver/$driverId': typeof DriverDriverIdRoute;
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/active-run': typeof ActiveRunRoute;
  '/add': typeof AddRoute;
  '/create-runs': typeof CreateRunsRoute;
  '/drivers': typeof DriversRoute;
  '/flights': typeof FlightsRoute;
  '/notifications': typeof NotificationsRoute;
  '/organization': typeof OrganizationRoute;
  '/report-templates': typeof ReportTemplatesRoute;
  '/reports': typeof ReportsRoute;
  '/request-run-report': typeof RequestRunReportRoute;
  '/runs': typeof RunsRoute;
  '/settings': typeof SettingsRoute;
  '/driver/$driverId': typeof DriverDriverIdRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/': typeof IndexRoute;
  '/active-run': typeof ActiveRunRoute;
  '/add': typeof AddRoute;
  '/create-runs': typeof CreateRunsRoute;
  '/drivers': typeof DriversRoute;
  '/flights': typeof FlightsRoute;
  '/notifications': typeof NotificationsRoute;
  '/organization': typeof OrganizationRoute;
  '/report-templates': typeof ReportTemplatesRoute;
  '/reports': typeof ReportsRoute;
  '/request-run-report': typeof RequestRunReportRoute;
  '/runs': typeof RunsRoute;
  '/settings': typeof SettingsRoute;
  '/driver/$driverId': typeof DriverDriverIdRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/active-run'
    | '/add'
    | '/create-runs'
    | '/drivers'
    | '/flights'
    | '/notifications'
    | '/organization'
    | '/report-templates'
    | '/reports'
    | '/request-run-report'
    | '/runs'
    | '/settings'
    | '/driver/$driverId';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/active-run'
    | '/add'
    | '/create-runs'
    | '/drivers'
    | '/flights'
    | '/notifications'
    | '/organization'
    | '/report-templates'
    | '/reports'
    | '/request-run-report'
    | '/runs'
    | '/settings'
    | '/driver/$driverId';
  id:
    | '__root__'
    | '/'
    | '/active-run'
    | '/add'
    | '/create-runs'
    | '/drivers'
    | '/flights'
    | '/notifications'
    | '/organization'
    | '/report-templates'
    | '/reports'
    | '/request-run-report'
    | '/runs'
    | '/settings'
    | '/driver/$driverId';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  ActiveRunRoute: typeof ActiveRunRoute;
  AddRoute: typeof AddRoute;
  CreateRunsRoute: typeof CreateRunsRoute;
  DriversRoute: typeof DriversRoute;
  FlightsRoute: typeof FlightsRoute;
  NotificationsRoute: typeof NotificationsRoute;
  OrganizationRoute: typeof OrganizationRoute;
  ReportTemplatesRoute: typeof ReportTemplatesRoute;
  ReportsRoute: typeof ReportsRoute;
  RequestRunReportRoute: typeof RequestRunReportRoute;
  RunsRoute: typeof RunsRoute;
  SettingsRoute: typeof SettingsRoute;
  DriverDriverIdRoute: typeof DriverDriverIdRoute;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings';
      path: '/settings';
      fullPath: '/settings';
      preLoaderRoute: typeof SettingsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/runs': {
      id: '/runs';
      path: '/runs';
      fullPath: '/runs';
      preLoaderRoute: typeof RunsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/request-run-report': {
      id: '/request-run-report';
      path: '/request-run-report';
      fullPath: '/request-run-report';
      preLoaderRoute: typeof RequestRunReportRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/reports': {
      id: '/reports';
      path: '/reports';
      fullPath: '/reports';
      preLoaderRoute: typeof ReportsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/report-templates': {
      id: '/report-templates';
      path: '/report-templates';
      fullPath: '/report-templates';
      preLoaderRoute: typeof ReportTemplatesRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/organization': {
      id: '/organization';
      path: '/organization';
      fullPath: '/organization';
      preLoaderRoute: typeof OrganizationRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/notifications': {
      id: '/notifications';
      path: '/notifications';
      fullPath: '/notifications';
      preLoaderRoute: typeof NotificationsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/flights': {
      id: '/flights';
      path: '/flights';
      fullPath: '/flights';
      preLoaderRoute: typeof FlightsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/drivers': {
      id: '/drivers';
      path: '/drivers';
      fullPath: '/drivers';
      preLoaderRoute: typeof DriversRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/create-runs': {
      id: '/create-runs';
      path: '/create-runs';
      fullPath: '/create-runs';
      preLoaderRoute: typeof CreateRunsRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/add': {
      id: '/add';
      path: '/add';
      fullPath: '/add';
      preLoaderRoute: typeof AddRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/active-run': {
      id: '/active-run';
      path: '/active-run';
      fullPath: '/active-run';
      preLoaderRoute: typeof ActiveRunRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/driver/$driverId': {
      id: '/driver/$driverId';
      path: '/driver/$driverId';
      fullPath: '/driver/$driverId';
      preLoaderRoute: typeof DriverDriverIdRouteImport;
      parentRoute: typeof rootRouteImport;
    };
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ActiveRunRoute: ActiveRunRoute,
  AddRoute: AddRoute,
  CreateRunsRoute: CreateRunsRoute,
  DriversRoute: DriversRoute,
  FlightsRoute: FlightsRoute,
  NotificationsRoute: NotificationsRoute,
  OrganizationRoute: OrganizationRoute,
  ReportTemplatesRoute: ReportTemplatesRoute,
  ReportsRoute: ReportsRoute,
  RequestRunReportRoute: RequestRunReportRoute,
  RunsRoute: RunsRoute,
  SettingsRoute: SettingsRoute,
  DriverDriverIdRoute: DriverDriverIdRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
